class ScoreBoard {
    field int score;
    field int gameLevel;
    field int maxGameLevel;

    /** Constructs scores in a new game perspective */
    constructor ScoreBoard new(int inputMaxGameLevel) {
        let score = 0;
        let gameLevel = 1;
        let maxGameLevel = inputMaxGameLevel;

        return this;
    }

   /** Disposes score board */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }    

    /** Scores one point */
    method void scoreOnePoint() {
        let score = score + 1;

        return;
    }

    /**
    Enhance game level by one
    */
    method void addGameLevelByOne() {
        if (gameLevel < maxGameLevel) {
            let gameLevel = gameLevel + 1;
        }

        return;
    }

    /**
    Retrieve current game level
    @returns int, game level (ranging from 1 to 10)
    */
    method int getGameLevel() {
        return gameLevel;
    }

    /**
    Retrieve score points
    @returns int, score
    */
    method int getScore() {
        return score;
    }

    /** Print current score board */
    method void printScore() {
        do Output.moveCursor(0, 0); // move cursor to the top left corner of screen
        do Output.printString("Score: ");
        do Output.printInt(score);
        do Output.printString("       "); // remove redundant score point from last games

        return;
    } 

    /** Reset the score board */
    method void resetScore() {
        let score = 0;

        return;
    }

    /** Print current game level */
    method void printGameLevel() {
        do Output.moveCursor(0, 50);    // move cursor to the top right corner of screen
        do Output.printString("Game Level: ");
        do Output.printInt(gameLevel);
        do Output.printString("  "); // remove redundant game level from last games

        return;
    }

    /** Reset the game level */
    method void resetGameLevel() {
        let gameLevel = 1;

        return;
    }    
}